// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dis-migration-service/application"
	"github.com/ONSdigital/dis-migration-service/domain"
	"sync"
)

// Ensure, that JobServiceMock does implement application.JobService.
// If this is not the case, regenerate this file with moq.
var _ application.JobService = &JobServiceMock{}

// JobServiceMock is a mock implementation of application.JobService.
//
//	func TestSomethingThatUsesJobService(t *testing.T) {
//
//		// make and configure a mocked application.JobService
//		mockedJobService := &JobServiceMock{
//			CreateJobFunc: func(ctx context.Context, jobConfig *domain.JobConfig) (*domain.Job, error) {
//				panic("mock out the CreateJob method")
//			},
//			GetJobFunc: func(ctx context.Context, jobID string) (*domain.Job, error) {
//				panic("mock out the GetJob method")
//			},
//		}
//
//		// use mockedJobService in code that requires application.JobService
//		// and then make assertions.
//
//	}
type JobServiceMock struct {
	// CreateJobFunc mocks the CreateJob method.
	CreateJobFunc func(ctx context.Context, jobConfig *domain.JobConfig) (*domain.Job, error)

	// GetJobFunc mocks the GetJob method.
	GetJobFunc func(ctx context.Context, jobID string) (*domain.Job, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateJob holds details about calls to the CreateJob method.
		CreateJob []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// JobConfig is the jobConfig argument value.
			JobConfig *domain.JobConfig
		}
		// GetJob holds details about calls to the GetJob method.
		GetJob []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// JobID is the jobID argument value.
			JobID string
		}
	}
	lockCreateJob sync.RWMutex
	lockGetJob    sync.RWMutex
}

// CreateJob calls CreateJobFunc.
func (mock *JobServiceMock) CreateJob(ctx context.Context, jobConfig *domain.JobConfig) (*domain.Job, error) {
	if mock.CreateJobFunc == nil {
		panic("JobServiceMock.CreateJobFunc: method is nil but JobService.CreateJob was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		JobConfig *domain.JobConfig
	}{
		Ctx:       ctx,
		JobConfig: jobConfig,
	}
	mock.lockCreateJob.Lock()
	mock.calls.CreateJob = append(mock.calls.CreateJob, callInfo)
	mock.lockCreateJob.Unlock()
	return mock.CreateJobFunc(ctx, jobConfig)
}

// CreateJobCalls gets all the calls that were made to CreateJob.
// Check the length with:
//
//	len(mockedJobService.CreateJobCalls())
func (mock *JobServiceMock) CreateJobCalls() []struct {
	Ctx       context.Context
	JobConfig *domain.JobConfig
} {
	var calls []struct {
		Ctx       context.Context
		JobConfig *domain.JobConfig
	}
	mock.lockCreateJob.RLock()
	calls = mock.calls.CreateJob
	mock.lockCreateJob.RUnlock()
	return calls
}

// GetJob calls GetJobFunc.
func (mock *JobServiceMock) GetJob(ctx context.Context, jobID string) (*domain.Job, error) {
	if mock.GetJobFunc == nil {
		panic("JobServiceMock.GetJobFunc: method is nil but JobService.GetJob was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		JobID string
	}{
		Ctx:   ctx,
		JobID: jobID,
	}
	mock.lockGetJob.Lock()
	mock.calls.GetJob = append(mock.calls.GetJob, callInfo)
	mock.lockGetJob.Unlock()
	return mock.GetJobFunc(ctx, jobID)
}

// GetJobCalls gets all the calls that were made to GetJob.
// Check the length with:
//
//	len(mockedJobService.GetJobCalls())
func (mock *JobServiceMock) GetJobCalls() []struct {
	Ctx   context.Context
	JobID string
} {
	var calls []struct {
		Ctx   context.Context
		JobID string
	}
	mock.lockGetJob.RLock()
	calls = mock.calls.GetJob
	mock.lockGetJob.RUnlock()
	return calls
}
