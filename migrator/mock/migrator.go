// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dis-migration-service/domain"
	"github.com/ONSdigital/dis-migration-service/migrator"
	"sync"
)

// Ensure, that MigratorMock does implement migrator.Migrator.
// If this is not the case, regenerate this file with moq.
var _ migrator.Migrator = &MigratorMock{}

// MigratorMock is a mock implementation of migrator.Migrator.
//
//	func TestSomethingThatUsesMigrator(t *testing.T) {
//
//		// make and configure a mocked migrator.Migrator
//		mockedMigrator := &MigratorMock{
//			MigrateFunc: func(ctx context.Context, job *domain.Job)  {
//				panic("mock out the Migrate method")
//			},
//			ShutdownFunc: func(ctx context.Context) error {
//				panic("mock out the Shutdown method")
//			},
//		}
//
//		// use mockedMigrator in code that requires migrator.Migrator
//		// and then make assertions.
//
//	}
type MigratorMock struct {
	// MigrateFunc mocks the Migrate method.
	MigrateFunc func(ctx context.Context, job *domain.Job)

	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Migrate holds details about calls to the Migrate method.
		Migrate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Job is the job argument value.
			Job *domain.Job
		}
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockMigrate  sync.RWMutex
	lockShutdown sync.RWMutex
}

// Migrate calls MigrateFunc.
func (mock *MigratorMock) Migrate(ctx context.Context, job *domain.Job) {
	if mock.MigrateFunc == nil {
		panic("MigratorMock.MigrateFunc: method is nil but Migrator.Migrate was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Job *domain.Job
	}{
		Ctx: ctx,
		Job: job,
	}
	mock.lockMigrate.Lock()
	mock.calls.Migrate = append(mock.calls.Migrate, callInfo)
	mock.lockMigrate.Unlock()
	mock.MigrateFunc(ctx, job)
}

// MigrateCalls gets all the calls that were made to Migrate.
// Check the length with:
//
//	len(mockedMigrator.MigrateCalls())
func (mock *MigratorMock) MigrateCalls() []struct {
	Ctx context.Context
	Job *domain.Job
} {
	var calls []struct {
		Ctx context.Context
		Job *domain.Job
	}
	mock.lockMigrate.RLock()
	calls = mock.calls.Migrate
	mock.lockMigrate.RUnlock()
	return calls
}

// Shutdown calls ShutdownFunc.
func (mock *MigratorMock) Shutdown(ctx context.Context) error {
	if mock.ShutdownFunc == nil {
		panic("MigratorMock.ShutdownFunc: method is nil but Migrator.Shutdown was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	return mock.ShutdownFunc(ctx)
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//
//	len(mockedMigrator.ShutdownCalls())
func (mock *MigratorMock) ShutdownCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}
