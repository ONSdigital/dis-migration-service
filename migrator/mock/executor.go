// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dis-migration-service/domain"
	"github.com/ONSdigital/dis-migration-service/migrator"
	"sync"
)

// Ensure, that TaskExecutorMock does implement migrator.TaskExecutor.
// If this is not the case, regenerate this file with moq.
var _ migrator.TaskExecutor = &TaskExecutorMock{}

// TaskExecutorMock is a mock implementation of migrator.TaskExecutor.
//
//	func TestSomethingThatUsesTaskExecutor(t *testing.T) {
//
//		// make and configure a mocked migrator.TaskExecutor
//		mockedTaskExecutor := &TaskExecutorMock{
//			MigrateFunc: func(ctx context.Context, job *domain.Job) error {
//				panic("mock out the Migrate method")
//			},
//		}
//
//		// use mockedTaskExecutor in code that requires migrator.TaskExecutor
//		// and then make assertions.
//
//	}
type TaskExecutorMock struct {
	// MigrateFunc mocks the Migrate method.
	MigrateFunc func(ctx context.Context, job *domain.Job) error

	// calls tracks calls to the methods.
	calls struct {
		// Migrate holds details about calls to the Migrate method.
		Migrate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Job is the job argument value.
			Job *domain.Job
		}
	}
	lockMigrate sync.RWMutex
}

// Migrate calls MigrateFunc.
func (mock *TaskExecutorMock) Migrate(ctx context.Context, job *domain.Job) error {
	if mock.MigrateFunc == nil {
		panic("TaskExecutorMock.MigrateFunc: method is nil but TaskExecutor.Migrate was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Job *domain.Job
	}{
		Ctx: ctx,
		Job: job,
	}
	mock.lockMigrate.Lock()
	mock.calls.Migrate = append(mock.calls.Migrate, callInfo)
	mock.lockMigrate.Unlock()
	return mock.MigrateFunc(ctx, job)
}

// MigrateCalls gets all the calls that were made to Migrate.
// Check the length with:
//
//	len(mockedTaskExecutor.MigrateCalls())
func (mock *TaskExecutorMock) MigrateCalls() []struct {
	Ctx context.Context
	Job *domain.Job
} {
	var calls []struct {
		Ctx context.Context
		Job *domain.Job
	}
	mock.lockMigrate.RLock()
	calls = mock.calls.Migrate
	mock.lockMigrate.RUnlock()
	return calls
}
