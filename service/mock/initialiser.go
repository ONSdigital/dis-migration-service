// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dis-migration-service/clients"
	"github.com/ONSdigital/dis-migration-service/config"
	"github.com/ONSdigital/dis-migration-service/migrator"
	"github.com/ONSdigital/dis-migration-service/service"
	"github.com/ONSdigital/dis-migration-service/store"
	"net/http"
	"sync"
)

// Ensure, that InitialiserMock does implement service.Initialiser.
// If this is not the case, regenerate this file with moq.
var _ service.Initialiser = &InitialiserMock{}

// InitialiserMock is a mock implementation of service.Initialiser.
//
// 	func TestSomethingThatUsesInitialiser(t *testing.T) {
//
// 		// make and configure a mocked service.Initialiser
// 		mockedInitialiser := &InitialiserMock{
// 			DoGetAppClientsFunc: func(ctx context.Context, cfg *config.Config) *clients.ClientList {
// 				panic("mock out the DoGetAppClients method")
// 			},
// 			DoGetHTTPServerFunc: func(bindAddr string, router http.Handler) service.HTTPServer {
// 				panic("mock out the DoGetHTTPServer method")
// 			},
// 			DoGetHealthCheckFunc: func(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error) {
// 				panic("mock out the DoGetHealthCheck method")
// 			},
// 			DoGetMigratorFunc: func(ctx context.Context, storeMoqParam store.Datastore, clientList *clients.ClientList) (migrator.Migrator, error) {
// 				panic("mock out the DoGetMigrator method")
// 			},
// 			DoGetMongoDBFunc: func(ctx context.Context, cfg config.MongoConfig) (store.MongoDB, error) {
// 				panic("mock out the DoGetMongoDB method")
// 			},
// 		}
//
// 		// use mockedInitialiser in code that requires service.Initialiser
// 		// and then make assertions.
//
// 	}
type InitialiserMock struct {
	// DoGetAppClientsFunc mocks the DoGetAppClients method.
	DoGetAppClientsFunc func(ctx context.Context, cfg *config.Config) *clients.ClientList

	// DoGetHTTPServerFunc mocks the DoGetHTTPServer method.
	DoGetHTTPServerFunc func(bindAddr string, router http.Handler) service.HTTPServer

	// DoGetHealthCheckFunc mocks the DoGetHealthCheck method.
	DoGetHealthCheckFunc func(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error)

	// DoGetMigratorFunc mocks the DoGetMigrator method.
	DoGetMigratorFunc func(ctx context.Context, storeMoqParam store.Datastore, clientList *clients.ClientList) (migrator.Migrator, error)

	// DoGetMongoDBFunc mocks the DoGetMongoDB method.
	DoGetMongoDBFunc func(ctx context.Context, cfg config.MongoConfig) (store.MongoDB, error)

	// calls tracks calls to the methods.
	calls struct {
		// DoGetAppClients holds details about calls to the DoGetAppClients method.
		DoGetAppClients []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cfg is the cfg argument value.
			Cfg *config.Config
		}
		// DoGetHTTPServer holds details about calls to the DoGetHTTPServer method.
		DoGetHTTPServer []struct {
			// BindAddr is the bindAddr argument value.
			BindAddr string
			// Router is the router argument value.
			Router http.Handler
		}
		// DoGetHealthCheck holds details about calls to the DoGetHealthCheck method.
		DoGetHealthCheck []struct {
			// Cfg is the cfg argument value.
			Cfg *config.Config
			// BuildTime is the buildTime argument value.
			BuildTime string
			// GitCommit is the gitCommit argument value.
			GitCommit string
			// Version is the version argument value.
			Version string
		}
		// DoGetMigrator holds details about calls to the DoGetMigrator method.
		DoGetMigrator []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StoreMoqParam is the storeMoqParam argument value.
			StoreMoqParam store.Datastore
			// ClientList is the clientList argument value.
			ClientList *clients.ClientList
		}
		// DoGetMongoDB holds details about calls to the DoGetMongoDB method.
		DoGetMongoDB []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cfg is the cfg argument value.
			Cfg config.MongoConfig
		}
	}
	lockDoGetAppClients  sync.RWMutex
	lockDoGetHTTPServer  sync.RWMutex
	lockDoGetHealthCheck sync.RWMutex
	lockDoGetMigrator    sync.RWMutex
	lockDoGetMongoDB     sync.RWMutex
}

// DoGetAppClients calls DoGetAppClientsFunc.
func (mock *InitialiserMock) DoGetAppClients(ctx context.Context, cfg *config.Config) *clients.ClientList {
	if mock.DoGetAppClientsFunc == nil {
		panic("InitialiserMock.DoGetAppClientsFunc: method is nil but Initialiser.DoGetAppClients was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cfg *config.Config
	}{
		Ctx: ctx,
		Cfg: cfg,
	}
	mock.lockDoGetAppClients.Lock()
	mock.calls.DoGetAppClients = append(mock.calls.DoGetAppClients, callInfo)
	mock.lockDoGetAppClients.Unlock()
	return mock.DoGetAppClientsFunc(ctx, cfg)
}

// DoGetAppClientsCalls gets all the calls that were made to DoGetAppClients.
// Check the length with:
//     len(mockedInitialiser.DoGetAppClientsCalls())
func (mock *InitialiserMock) DoGetAppClientsCalls() []struct {
	Ctx context.Context
	Cfg *config.Config
} {
	var calls []struct {
		Ctx context.Context
		Cfg *config.Config
	}
	mock.lockDoGetAppClients.RLock()
	calls = mock.calls.DoGetAppClients
	mock.lockDoGetAppClients.RUnlock()
	return calls
}

// DoGetHTTPServer calls DoGetHTTPServerFunc.
func (mock *InitialiserMock) DoGetHTTPServer(bindAddr string, router http.Handler) service.HTTPServer {
	if mock.DoGetHTTPServerFunc == nil {
		panic("InitialiserMock.DoGetHTTPServerFunc: method is nil but Initialiser.DoGetHTTPServer was just called")
	}
	callInfo := struct {
		BindAddr string
		Router   http.Handler
	}{
		BindAddr: bindAddr,
		Router:   router,
	}
	mock.lockDoGetHTTPServer.Lock()
	mock.calls.DoGetHTTPServer = append(mock.calls.DoGetHTTPServer, callInfo)
	mock.lockDoGetHTTPServer.Unlock()
	return mock.DoGetHTTPServerFunc(bindAddr, router)
}

// DoGetHTTPServerCalls gets all the calls that were made to DoGetHTTPServer.
// Check the length with:
//     len(mockedInitialiser.DoGetHTTPServerCalls())
func (mock *InitialiserMock) DoGetHTTPServerCalls() []struct {
	BindAddr string
	Router   http.Handler
} {
	var calls []struct {
		BindAddr string
		Router   http.Handler
	}
	mock.lockDoGetHTTPServer.RLock()
	calls = mock.calls.DoGetHTTPServer
	mock.lockDoGetHTTPServer.RUnlock()
	return calls
}

// DoGetHealthCheck calls DoGetHealthCheckFunc.
func (mock *InitialiserMock) DoGetHealthCheck(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error) {
	if mock.DoGetHealthCheckFunc == nil {
		panic("InitialiserMock.DoGetHealthCheckFunc: method is nil but Initialiser.DoGetHealthCheck was just called")
	}
	callInfo := struct {
		Cfg       *config.Config
		BuildTime string
		GitCommit string
		Version   string
	}{
		Cfg:       cfg,
		BuildTime: buildTime,
		GitCommit: gitCommit,
		Version:   version,
	}
	mock.lockDoGetHealthCheck.Lock()
	mock.calls.DoGetHealthCheck = append(mock.calls.DoGetHealthCheck, callInfo)
	mock.lockDoGetHealthCheck.Unlock()
	return mock.DoGetHealthCheckFunc(cfg, buildTime, gitCommit, version)
}

// DoGetHealthCheckCalls gets all the calls that were made to DoGetHealthCheck.
// Check the length with:
//     len(mockedInitialiser.DoGetHealthCheckCalls())
func (mock *InitialiserMock) DoGetHealthCheckCalls() []struct {
	Cfg       *config.Config
	BuildTime string
	GitCommit string
	Version   string
} {
	var calls []struct {
		Cfg       *config.Config
		BuildTime string
		GitCommit string
		Version   string
	}
	mock.lockDoGetHealthCheck.RLock()
	calls = mock.calls.DoGetHealthCheck
	mock.lockDoGetHealthCheck.RUnlock()
	return calls
}

// DoGetMigrator calls DoGetMigratorFunc.
func (mock *InitialiserMock) DoGetMigrator(ctx context.Context, storeMoqParam store.Datastore, clientList *clients.ClientList) (migrator.Migrator, error) {
	if mock.DoGetMigratorFunc == nil {
		panic("InitialiserMock.DoGetMigratorFunc: method is nil but Initialiser.DoGetMigrator was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		StoreMoqParam store.Datastore
		ClientList    *clients.ClientList
	}{
		Ctx:           ctx,
		StoreMoqParam: storeMoqParam,
		ClientList:    clientList,
	}
	mock.lockDoGetMigrator.Lock()
	mock.calls.DoGetMigrator = append(mock.calls.DoGetMigrator, callInfo)
	mock.lockDoGetMigrator.Unlock()
	return mock.DoGetMigratorFunc(ctx, storeMoqParam, clientList)
}

// DoGetMigratorCalls gets all the calls that were made to DoGetMigrator.
// Check the length with:
//     len(mockedInitialiser.DoGetMigratorCalls())
func (mock *InitialiserMock) DoGetMigratorCalls() []struct {
	Ctx           context.Context
	StoreMoqParam store.Datastore
	ClientList    *clients.ClientList
} {
	var calls []struct {
		Ctx           context.Context
		StoreMoqParam store.Datastore
		ClientList    *clients.ClientList
	}
	mock.lockDoGetMigrator.RLock()
	calls = mock.calls.DoGetMigrator
	mock.lockDoGetMigrator.RUnlock()
	return calls
}

// DoGetMongoDB calls DoGetMongoDBFunc.
func (mock *InitialiserMock) DoGetMongoDB(ctx context.Context, cfg config.MongoConfig) (store.MongoDB, error) {
	if mock.DoGetMongoDBFunc == nil {
		panic("InitialiserMock.DoGetMongoDBFunc: method is nil but Initialiser.DoGetMongoDB was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cfg config.MongoConfig
	}{
		Ctx: ctx,
		Cfg: cfg,
	}
	mock.lockDoGetMongoDB.Lock()
	mock.calls.DoGetMongoDB = append(mock.calls.DoGetMongoDB, callInfo)
	mock.lockDoGetMongoDB.Unlock()
	return mock.DoGetMongoDBFunc(ctx, cfg)
}

// DoGetMongoDBCalls gets all the calls that were made to DoGetMongoDB.
// Check the length with:
//     len(mockedInitialiser.DoGetMongoDBCalls())
func (mock *InitialiserMock) DoGetMongoDBCalls() []struct {
	Ctx context.Context
	Cfg config.MongoConfig
} {
	var calls []struct {
		Ctx context.Context
		Cfg config.MongoConfig
	}
	mock.lockDoGetMongoDB.RLock()
	calls = mock.calls.DoGetMongoDB
	mock.lockDoGetMongoDB.RUnlock()
	return calls
}
