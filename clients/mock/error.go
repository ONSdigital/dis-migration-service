// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dis-migration-service/clients"
	"sync"
)

// Ensure, that ClientErrorMock does implement clients.ClientError.
// If this is not the case, regenerate this file with moq.
var _ clients.ClientError = &ClientErrorMock{}

// ClientErrorMock is a mock implementation of clients.ClientError.
//
//	func TestSomethingThatUsesClientError(t *testing.T) {
//
//		// make and configure a mocked clients.ClientError
//		mockedClientError := &ClientErrorMock{
//			CodeFunc: func() int {
//				panic("mock out the Code method")
//			},
//			ErrorFunc: func() string {
//				panic("mock out the Error method")
//			},
//		}
//
//		// use mockedClientError in code that requires clients.ClientError
//		// and then make assertions.
//
//	}
type ClientErrorMock struct {
	// CodeFunc mocks the Code method.
	CodeFunc func() int

	// ErrorFunc mocks the Error method.
	ErrorFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Code holds details about calls to the Code method.
		Code []struct {
		}
		// Error holds details about calls to the Error method.
		Error []struct {
		}
	}
	lockCode  sync.RWMutex
	lockError sync.RWMutex
}

// Code calls CodeFunc.
func (mock *ClientErrorMock) Code() int {
	if mock.CodeFunc == nil {
		panic("ClientErrorMock.CodeFunc: method is nil but ClientError.Code was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCode.Lock()
	mock.calls.Code = append(mock.calls.Code, callInfo)
	mock.lockCode.Unlock()
	return mock.CodeFunc()
}

// CodeCalls gets all the calls that were made to Code.
// Check the length with:
//
//	len(mockedClientError.CodeCalls())
func (mock *ClientErrorMock) CodeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCode.RLock()
	calls = mock.calls.Code
	mock.lockCode.RUnlock()
	return calls
}

// Error calls ErrorFunc.
func (mock *ClientErrorMock) Error() string {
	if mock.ErrorFunc == nil {
		panic("ClientErrorMock.ErrorFunc: method is nil but ClientError.Error was just called")
	}
	callInfo := struct {
	}{}
	mock.lockError.Lock()
	mock.calls.Error = append(mock.calls.Error, callInfo)
	mock.lockError.Unlock()
	return mock.ErrorFunc()
}

// ErrorCalls gets all the calls that were made to Error.
// Check the length with:
//
//	len(mockedClientError.ErrorCalls())
func (mock *ClientErrorMock) ErrorCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockError.RLock()
	calls = mock.calls.Error
	mock.lockError.RUnlock()
	return calls
}
