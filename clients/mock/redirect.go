// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dis-migration-service/clients"
	redirectModels "github.com/ONSdigital/dis-redirect-api/models"
	redirectSDK "github.com/ONSdigital/dis-redirect-api/sdk/go"
	redirectErrors "github.com/ONSdigital/dis-redirect-api/sdk/go/errors"
	"sync"
)

// Ensure, that RedirectAPIClientMock does implement clients.RedirectAPIClient.
// If this is not the case, regenerate this file with moq.
var _ clients.RedirectAPIClient = &RedirectAPIClientMock{}

// RedirectAPIClientMock is a mock implementation of clients.RedirectAPIClient.
//
//	func TestSomethingThatUsesRedirectAPIClient(t *testing.T) {
//
//		// make and configure a mocked clients.RedirectAPIClient
//		mockedRedirectAPIClient := &RedirectAPIClientMock{
//			PutRedirectFunc: func(ctx context.Context, options redirectSDK.Options, id string, payload redirectModels.Redirect) redirectErrors.Error {
//				panic("mock out the PutRedirect method")
//			},
//		}
//
//		// use mockedRedirectAPIClient in code that requires clients.RedirectAPIClient
//		// and then make assertions.
//
//	}
type RedirectAPIClientMock struct {
	// PutRedirectFunc mocks the PutRedirect method.
	PutRedirectFunc func(ctx context.Context, options redirectSDK.Options, id string, payload redirectModels.Redirect) redirectErrors.Error

	// calls tracks calls to the methods.
	calls struct {
		// PutRedirect holds details about calls to the PutRedirect method.
		PutRedirect []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Options is the options argument value.
			Options redirectSDK.Options
			// ID is the id argument value.
			ID string
			// Payload is the payload argument value.
			Payload redirectModels.Redirect
		}
	}
	lockPutRedirect sync.RWMutex
}

// PutRedirect calls PutRedirectFunc.
func (mock *RedirectAPIClientMock) PutRedirect(ctx context.Context, options redirectSDK.Options, id string, payload redirectModels.Redirect) redirectErrors.Error {
	if mock.PutRedirectFunc == nil {
		panic("RedirectAPIClientMock.PutRedirectFunc: method is nil but RedirectAPIClient.PutRedirect was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Options redirectSDK.Options
		ID      string
		Payload redirectModels.Redirect
	}{
		Ctx:     ctx,
		Options: options,
		ID:      id,
		Payload: payload,
	}
	mock.lockPutRedirect.Lock()
	mock.calls.PutRedirect = append(mock.calls.PutRedirect, callInfo)
	mock.lockPutRedirect.Unlock()
	return mock.PutRedirectFunc(ctx, options, id, payload)
}

// PutRedirectCalls gets all the calls that were made to PutRedirect.
// Check the length with:
//
//	len(mockedRedirectAPIClient.PutRedirectCalls())
func (mock *RedirectAPIClientMock) PutRedirectCalls() []struct {
	Ctx     context.Context
	Options redirectSDK.Options
	ID      string
	Payload redirectModels.Redirect
} {
	var calls []struct {
		Ctx     context.Context
		Options redirectSDK.Options
		ID      string
		Payload redirectModels.Redirect
	}
	mock.lockPutRedirect.RLock()
	calls = mock.calls.PutRedirect
	mock.lockPutRedirect.RUnlock()
	return calls
}
