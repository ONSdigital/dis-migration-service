// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dis-migration-service/clients"
	"github.com/ONSdigital/dp-api-clients-go/v2/zebedee"
	"sync"
)

// Ensure, that ZebedeeClientMock does implement clients.ZebedeeClient.
// If this is not the case, regenerate this file with moq.
var _ clients.ZebedeeClient = &ZebedeeClientMock{}

// ZebedeeClientMock is a mock implementation of clients.ZebedeeClient.
//
//	func TestSomethingThatUsesZebedeeClient(t *testing.T) {
//
//		// make and configure a mocked clients.ZebedeeClient
//		mockedZebedeeClient := &ZebedeeClientMock{
//			GetPageDataFunc: func(ctx context.Context, userAuthToken string, collectionID string, lang string, path string) (zebedee.PageData, error) {
//				panic("mock out the GetPageData method")
//			},
//		}
//
//		// use mockedZebedeeClient in code that requires clients.ZebedeeClient
//		// and then make assertions.
//
//	}
type ZebedeeClientMock struct {
	// GetPageDataFunc mocks the GetPageData method.
	GetPageDataFunc func(ctx context.Context, userAuthToken string, collectionID string, lang string, path string) (zebedee.PageData, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPageData holds details about calls to the GetPageData method.
		GetPageData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// Lang is the lang argument value.
			Lang string
			// Path is the path argument value.
			Path string
		}
	}
	lockGetPageData sync.RWMutex
}

// GetPageData calls GetPageDataFunc.
func (mock *ZebedeeClientMock) GetPageData(ctx context.Context, userAuthToken string, collectionID string, lang string, path string) (zebedee.PageData, error) {
	if mock.GetPageDataFunc == nil {
		panic("ZebedeeClientMock.GetPageDataFunc: method is nil but ZebedeeClient.GetPageData was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		UserAuthToken string
		CollectionID  string
		Lang          string
		Path          string
	}{
		Ctx:           ctx,
		UserAuthToken: userAuthToken,
		CollectionID:  collectionID,
		Lang:          lang,
		Path:          path,
	}
	mock.lockGetPageData.Lock()
	mock.calls.GetPageData = append(mock.calls.GetPageData, callInfo)
	mock.lockGetPageData.Unlock()
	return mock.GetPageDataFunc(ctx, userAuthToken, collectionID, lang, path)
}

// GetPageDataCalls gets all the calls that were made to GetPageData.
// Check the length with:
//
//	len(mockedZebedeeClient.GetPageDataCalls())
func (mock *ZebedeeClientMock) GetPageDataCalls() []struct {
	Ctx           context.Context
	UserAuthToken string
	CollectionID  string
	Lang          string
	Path          string
} {
	var calls []struct {
		Ctx           context.Context
		UserAuthToken string
		CollectionID  string
		Lang          string
		Path          string
	}
	mock.lockGetPageData.RLock()
	calls = mock.calls.GetPageData
	mock.lockGetPageData.RUnlock()
	return calls
}
