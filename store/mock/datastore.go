// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dis-migration-service/domain"
	"github.com/ONSdigital/dis-migration-service/store"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that StorerMock does implement store.Storer.
// If this is not the case, regenerate this file with moq.
var _ store.Storer = &StorerMock{}

// StorerMock is a mock implementation of store.Storer.
//
//	func TestSomethingThatUsesStorer(t *testing.T) {
//
//		// make and configure a mocked store.Storer
//		mockedStorer := &StorerMock{
//			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
//				panic("mock out the Checker method")
//			},
//			CloseFunc: func(ctx context.Context) error {
//				panic("mock out the Close method")
//			},
//			CreateEventFunc: func(ctx context.Context, event *domain.Event) error {
//				panic("mock out the CreateEvent method")
//			},
//			CreateJobFunc: func(ctx context.Context, job *domain.Job) (*domain.Job, error) {
//				panic("mock out the CreateJob method")
//			},
//			GetJobFunc: func(ctx context.Context, jobID string) (*domain.Job, error) {
//				panic("mock out the GetJob method")
//			},
//		}
//
//		// use mockedStorer in code that requires store.Storer
//		// and then make assertions.
//
//	}
type StorerMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// CreateEventFunc mocks the CreateEvent method.
	CreateEventFunc func(ctx context.Context, event *domain.Event) error

	// CreateJobFunc mocks the CreateJob method.
	CreateJobFunc func(ctx context.Context, job *domain.Job) (*domain.Job, error)

	// GetJobFunc mocks the GetJob method.
	GetJobFunc func(ctx context.Context, jobID string) (*domain.Job, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// CreateEvent holds details about calls to the CreateEvent method.
		CreateEvent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Event is the event argument value.
			Event *domain.Event
		}
		// CreateJob holds details about calls to the CreateJob method.
		CreateJob []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Job is the job argument value.
			Job *domain.Job
		}
		// GetJob holds details about calls to the GetJob method.
		GetJob []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// JobID is the jobID argument value.
			JobID string
		}
	}
	lockChecker     sync.RWMutex
	lockClose       sync.RWMutex
	lockCreateEvent sync.RWMutex
	lockCreateJob   sync.RWMutex
	lockGetJob      sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *StorerMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("StorerMock.CheckerFunc: method is nil but Storer.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//
//	len(mockedStorer.CheckerCalls())
func (mock *StorerMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *StorerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("StorerMock.CloseFunc: method is nil but Storer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedStorer.CloseCalls())
func (mock *StorerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// CreateEvent calls CreateEventFunc.
func (mock *StorerMock) CreateEvent(ctx context.Context, event *domain.Event) error {
	if mock.CreateEventFunc == nil {
		panic("StorerMock.CreateEventFunc: method is nil but Storer.CreateEvent was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Event *domain.Event
	}{
		Ctx:   ctx,
		Event: event,
	}
	mock.lockCreateEvent.Lock()
	mock.calls.CreateEvent = append(mock.calls.CreateEvent, callInfo)
	mock.lockCreateEvent.Unlock()
	return mock.CreateEventFunc(ctx, event)
}

// CreateEventCalls gets all the calls that were made to CreateEvent.
// Check the length with:
//
//	len(mockedStorer.CreateEventCalls())
func (mock *StorerMock) CreateEventCalls() []struct {
	Ctx   context.Context
	Event *domain.Event
} {
	var calls []struct {
		Ctx   context.Context
		Event *domain.Event
	}
	mock.lockCreateEvent.RLock()
	calls = mock.calls.CreateEvent
	mock.lockCreateEvent.RUnlock()
	return calls
}

// CreateJob calls CreateJobFunc.
func (mock *StorerMock) CreateJob(ctx context.Context, job *domain.Job) (*domain.Job, error) {
	if mock.CreateJobFunc == nil {
		panic("StorerMock.CreateJobFunc: method is nil but Storer.CreateJob was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Job *domain.Job
	}{
		Ctx: ctx,
		Job: job,
	}
	mock.lockCreateJob.Lock()
	mock.calls.CreateJob = append(mock.calls.CreateJob, callInfo)
	mock.lockCreateJob.Unlock()
	return mock.CreateJobFunc(ctx, job)
}

// CreateJobCalls gets all the calls that were made to CreateJob.
// Check the length with:
//
//	len(mockedStorer.CreateJobCalls())
func (mock *StorerMock) CreateJobCalls() []struct {
	Ctx context.Context
	Job *domain.Job
} {
	var calls []struct {
		Ctx context.Context
		Job *domain.Job
	}
	mock.lockCreateJob.RLock()
	calls = mock.calls.CreateJob
	mock.lockCreateJob.RUnlock()
	return calls
}

// GetJob calls GetJobFunc.
func (mock *StorerMock) GetJob(ctx context.Context, jobID string) (*domain.Job, error) {
	if mock.GetJobFunc == nil {
		panic("StorerMock.GetJobFunc: method is nil but Storer.GetJob was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		JobID string
	}{
		Ctx:   ctx,
		JobID: jobID,
	}
	mock.lockGetJob.Lock()
	mock.calls.GetJob = append(mock.calls.GetJob, callInfo)
	mock.lockGetJob.Unlock()
	return mock.GetJobFunc(ctx, jobID)
}

// GetJobCalls gets all the calls that were made to GetJob.
// Check the length with:
//
//	len(mockedStorer.GetJobCalls())
func (mock *StorerMock) GetJobCalls() []struct {
	Ctx   context.Context
	JobID string
} {
	var calls []struct {
		Ctx   context.Context
		JobID string
	}
	mock.lockGetJob.RLock()
	calls = mock.calls.GetJob
	mock.lockGetJob.RUnlock()
	return calls
}
